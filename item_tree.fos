///////////////////////////////////////////////////////////////////////////////
// HEADER
///////////////////////////////////////////////////////////////////////////////
#define COST_FLAG_NONE (0)
#define COST_FLAG_BASE (1)

#define FLOAT_MAX (340282346600000016151267322115014000640.000000f)
#define UINT_MAX (4294967295)

#include "_defines.fos"

// Transforms {A|B|C & E & F|G & H} into A E F H
//            {1 1 0   0   1 0   1}      B E F H
    //                                   C E F H
    //                                   A E G H
    //                                   B E G H
    //                                   C E G H
array<array<uint>> GetGroupsFromOrs(array<uint> pids, array<bool> ors) {
    // 1. Transform {A|B|C&E&F|G&H} into A E F H
    //              {1 1 0 0 1 0 0}      B   G
    //                                   C
    array<array<uint>> columns;
    for (uint i = 0, y = 0; i < pids.length; i++) {
        if (columns.length <= y) {
            columns.resize(y + 1);
        }

        columns[y].insertLast(i);

        if (false == ors[i]) {
            y++;
        }
    }

    // 2. Transform A E F H into A E F H 
    //              B   G        B E F H
    //              C            C E F H
    //                           A E G H
    //                           B E G H
    //                           C E G H
    array<array<uint>> rows;
    for (uint column = 0; column < columns.length; column++) {
        if (0 == column) {
            //rows.resize(columns[0].length);
            for (uint i = 0; i < columns[0].length; i++) {
                //rows[i].insertLast(columns[0][i]);
                rows.resize(i + 1);
                rows[i].insertLast(columns[0][i]);
            }
        } else {
            uint m = rows.length;
            // Add new index to every of existing rows
            for (uint i = 0; i < m; i++) {
                rows[i].insertLast(columns[column][0]);
            }
            // For every extra id, clone the set of existing rows and set last item to new id
            if (columns[column].length > 1) {
                for (uint z = 1; z < columns[column].length; z++) {
                    for (uint y = 0; y < m; y++) {
                        rows.insertLast(rows[y]);
                        rows[rows.length - 1][rows[rows.length - 1].length - 1] = columns[column][z];
                    }
                }
            }
        }
    }

    return rows;
}

array<array<uint>> GetGroupsFromOrs(array<uint16> pids, array<bool> ors) {
    array<uint> ids;
    for (uint i = 0; i < pids.length; i++) {
        ids.insertLast(uint(pids[i]));
    }
    return GetGroupsFromOrs(ids, ors);
}

// Pretty prints item pid name for logs
string GetItemName(uint pid) {
    return "[" + pid + "]\t" + GetConstantName(1, pid);
}

uint TreeLogOffset = 0;
array<string> TreeLogStorage;
void TreeLog(string message, int offset = 0) {
    if (offset < 0) TreeLogOffset += offset;

    string@[] line;
    for (uint i = 0; i < TreeLogOffset; i++) {
        line.insertLast("\t");
    }
    line.insertLast(message);
    TreeLogStorage.insertLast(join(line,""));

    if (offset > 0) TreeLogOffset += offset;
}
void TreeLogCommit() {
    file f;
    if (f.open("logs/item_prices.yaml","w") >= 0) {
        for (uint i = 0; i < TreeLogStorage.length; i++) {
            f.writeString(TreeLogStorage[i] + "\n");
        }
        f.close();
        TreeLogStorage.resize(0);
    }    
}

// Find the maximum value of the array
float ArrayHighest(array<float> values)
{
    float result = 0.0f;
    for (uint i = 0, l = values.length; i < l; i++) {
        if (result < values[i]) {
            result = values[i];
        }
    }
    return result;
}

// Find the average value of the array
float ArrayAverage(array<float> values)
{
    if (0 == values.length) {
        return 0;
    }

    float summ = 0.0f;
    for (uint i = 0, l = values.length; i < l; i++) {
        summ += values[i];
    }
    return summ / float(values.length);
}

// Find the minimum value of the array
float ArrayLowest(array<float> values)
{
    float result = FLOAT_MAX;
    for (uint i = 0, l = values.length; i < l; i++) {
        if (result > values[i]) {
            result = values[i];
        }
    }
    return FLOAT_MAX == result ? 0.0f : result;
}

// Evaluates min max or avg value of the array
enum FilterType { None, Highest, Average, Lowest };

float Filter(array<float> values, FilterType mode) {
    if (FilterType::Highest == mode) return ArrayHighest(values);
    if (FilterType::Average == mode) return ArrayAverage(values);
    if (FilterType::Lowest == mode) return ArrayLowest(values);
    return 0.0f;
}

#ifdef __SERVER // ============================================================

// REAGENT REACTION PRODUCT
enum ReactiveType {
    ReactiveType,
    ReagentType,
    ReactionType,
    ItemReagentType,
    ToolReagentType,
    StatReagentType
}

string GetReactiveName(Reactive@ reactive) {
    switch (reactive.Type) {
        case StatReagentType:
            return "[stat." + reactive.Id + "] " + GetConstantName(0, reactive.Id);
        case ToolReagentType:
            return "[tool." + reactive.Id + "] " + GetConstantName(1, reactive.Id);
        case ItemReagentType:
            return "[item." + reactive.Id + "] " + GetConstantName(1, reactive.Id);
    }
    return "[error:" + reactive.Id + "] UNDEFINED";
}

string GetReactionName(Reaction@ reaction) {
    return "Reaction<" + reaction.Group + ":" + reaction.Id + ">";
}

class Reactive {
    uint get_Id() {
        return 0;
    }

    ReactiveType get_Type() {
        return ReactiveType::ReactiveType;
    }

    bool Is(Reactive@ reactive) {
        return this.Id == reactive.Id && this.Type == reactive.Type;
    }
}

class Reagent : Reactive
{
    array<Reaction@> Reactions;

    uint get_Id() override {
        return 0;
    }

    ReactiveType get_Type() override {
        return ReactiveType::ReagentType;
    }

    private float get_Weight() {
        return 0.0f;
    }

    private float get_Coefficient() {
        return 1.0f;
    }

    float CacheValue;
    FilterType CacheFilterType;

    Reagent() {
        this.CacheValue = 0.0f;
        this.CacheFilterType = FilterType::None;
    }

    void AddReaction(Reaction@ reaction) {
        if (!this.Has(reaction)) {
            this.Reactions.insertLast(reaction);
        }
    }

    bool Has(Reactive@ reactive) {
        for (uint i = 0, l = this.Reactions.length; i < l; i++) {
            if (reactive.Is(this.Reactions[i])) { 
                return true;
            }
        }
        return false;
    }

    bool Has(array<Reactive@> reactives) {
        for (uint i = 0, l = reactives.length; i < l; i++) {
            if (this.Has(reactives[i])) {
                return true;
            }
        }
        return false;
    }

    bool IsStatic() {
        return false;
    }

    float EvaluateSelf() {
        return this.Weight * this.Coefficient;
    }

    float Evaluate(array<Reactive@> skip, FilterType filter = FitlerType::Lowest) {
        TreeLog("# " + GetReactiveName(this) + ", scanning...", +1);

        // PriceType=Static
        if (this.IsStatic()) {
            this.CacheValue = this.EvaluateSelf();
            TreeLog("$ " + GetReactiveName(this) + " using static price: " + this.CacheValue, -1);
            return this.CacheValue;
        }

        if (this.CacheFilterType == filter) {
            TreeLog("$ " + GetReactiveName(this) + " using cached price: " + this.CacheValue, -1);
            return this.CacheValue;
        }

        // 1. Check self against the skip list
        for (uint i = 0, l = skip.length; i < l; i++) {
            if (this.Is(skip[i])) {
                TreeLog("@ Product " + GetReactiveName(this) + " is the same we are trying to produce", -1);
                return -1.0f; // Push up an invalid state on match
            }
        }

        // 2. If there are no reactions leading to this product, just get the own value
        if (0 == this.Reactions.length) {
            TreeLog("$ "+GetReactiveName(this)+" has no recipes, using built-in cost " + this.EvaluateSelf(), -1);
            this.CacheValue = this.EvaluateSelf();
            this.CacheFilterType = filter;
            return this.CacheValue;
        }

        // 3. Add self to skip list
        skip.insertLast(this);

        string@[] logs;

        // 4. For each reaction, find out the product value
        array<float> values;
        for (uint i = 0, l = this.Reactions.length; i < l; i++) {
            TreeLog("# "+GetReactionName(this.Reactions[i])+" produces " + GetReactiveName(this));
            this.Reactions[i].Dump();

            // 4.1 Ask reaction to evaluate the product
            float value = this.Reactions[i].Evaluate(this, skip, filter);

            TreeLog("$ "+GetReactionName(this.Reactions[i])+" price: " + value);

            // 4.2 If valid value returned, add it to the list
            if (0.0f <= value) {
                logs.insertLast("? Considering "+GetReactionName(this.Reactions[i])+" for producing "+GetReactiveName(this)+" with price: "+value+"...");
                values.insertLast(value);
            }
        }
        
        for (uint i = 0; i < logs.length; i++) {
            TreeLog(logs[i]);
        }

        // 5. If no values available, push up the invalid state
        if (0 == values.length) {
            TreeLog("@ Impossible to produce " + GetReactiveName(this) + ", using built-in cost: " + this.EvaluateSelf(), -1);
            //return -1.0f;
            this.CacheValue = this.EvaluateSelf();
            this.CacheFilterType = filter;
            return this.CacheValue;
        }

        // 6. Return the filtered value
        this.CacheValue = this.Coefficient * Filter(values, filter);
        this.CacheFilterType = filter;
        TreeLog("! Product " + GetReactiveName(this) + " picked price: " + this.CacheValue, -1);
        return this.CacheValue;
    }
}

class Reaction : Reactive
{
    private uint _id;

    uint Group;
    
    float Weight;
    float Coefficient;

    array<Reagent@> Reagents;
    array<Reagent@> Products;

    uint get_Id() override {
        return this._id;
    }

    void set_Id(uint id) {
        this._id = id;
    }

    ReactiveType get_Type() override {
        return ReactiveType::ReactionType;
    }

    Reaction(uint id, uint group, float coefficient = 1.0f, float weight = 0.0f) {
        this.Id = id;
        this.Coefficient = coefficient;
        this.Weight = weight;
        this.Group = group;
    }

    void AddReagents(Reagent@ reagent, uint count = 1) {
        for (uint i = 0; i < count; i++) {
            this.Reagents.insertLast(reagent);
        }
    }

    void AddProducts(Reagent@ product, uint count = 1) {
        for (uint i = 0; i < count; i++) {
            this.Products.insertLast(product);
        }
        product.AddReaction(this);
    }

    bool Has(Reactive@ reactive) {
        for (uint i = 0, l = this.Reagents.length; i < l; i++) {
            if (reactive.Is(this.Reagents[i])) {
                return true;
            }
        }
        return false;
    }

    bool Has(array<Reactive@> reactives) {
        for (uint i = 0, l = reactives.length; i < l; i++) {
            if (this.Has(reactives[i])) {
                return true;
            }
        }
        return false;
    }

    float EvaluateSelf(array<Reactive@> skip, FilterType filter = FilterType::Lowest) {
        float result = 0.0f;

        // 1. Return an invalid state if current reaction is in the skip list
        for (uint i = 0, l = skip.length; i < l; i++) {
            if (this.Is(skip[i])) {
                TreeLog("@ "+GetReactionName(this)+" was peformed earlier");
                return -1.0f;
            }
        }

        // 2. Add self to skip list
        skip.insertLast(this);

        // 3. Ask each reagent to calculate its own value
        for (uint i = 0, l = this.Reagents.length; i < l; i++) {
            // Reagent should return invalid state if it believes it is in a skip list
            float value = this.Reagents[i].Evaluate(skip, filter);
            // If one does, push it up to skip the reaction
            if (value < 0.0f) {
                return value;
            }
            // Add reagent value to the summ
            result += value;
        }

        // 4. Apply own values to the result
        result += this.Weight;
        result *= this.Coefficient;

        return result;
    }

    float Evaluate(Reagent@ product, array<Reactive@> skip, FilterType filter = FilterType::Lowest) {
        // 1. Check self against the skip list, add self to it, calculate the sum of all reagents
        float value = this.EvaluateSelf(skip, filter);

        TreeLog("# "+GetReactionName(this)+" " + GetReactiveName(product) + " evaluation, coefficient "+this.Coefficient+" reaction price: " + value, +1);

        // 2. If invalid state received, push it up
        //    If there is only one product on the output, just push up the full value as well
        if (value < 0.0f || 1 >= this.Products.length) {
            TreeLog("$ "+GetReactionName(this)+" " + GetReactiveName(product) + " is the only product, price: " + value, -1);
            return value;
        }

        // 4. Calculate the value in proportion among other products
        // 4.1 Calculate the "own value" summ for all products
        float summ = 0.0f;
        for (uint i = 0, l = this.Products.length; i < l; i++) {
            summ += this.Products[i].EvaluateSelf();
        }
        // 4.2 If summ is zero, push up the whole value
        if (summ < 0.0f) {
            TreeLog("$ "+GetReactionName(this)+" " + GetReactiveName(product) + " evaluation failed", -1);
            return value;
        }

        // 4.3 Multitply seeked product "own value" by total value and divide it by summ of "own' values"
        float productValue = product.EvaluateSelf();
        float result = productValue * value / summ;
        TreeLog("$ "+GetReactionName(this)+" " + GetReactiveName(product) + " price: " + productValue + " x "  + value + " / " + summ+" = "+result, -1);
        return result;
    }

    void Dump() {
        TreeLog("+ "+GetReactionName(this), 1);
        for (uint i = 0, l = this.Reagents.length; i < l; i++) {
            TreeLog("- " + GetReactiveName(this.Reagents[i]));
        }
        for (uint i = 0, l = this.Products.length; i < l; i++) {
            TreeLog("+ " + GetReactiveName(this.Products[i]));
        }
        TreeLog("- "+GetReactionName(this), -1);
    }
}

class ItemReagent : Reagent
{
    ProtoItem@ Proto;

    ItemReagent(ProtoItem@ proto) {
        @this.Proto = proto;
    }

    uint get_Id() override override {
        return uint(this.Proto.ProtoId);
    }

    ReactiveType get_Type() override {
        return ReactiveType::ItemReagentType;
    }

    float get_Weight() override {
        return float(this.Proto.Cost);
    }

    float get_Coefficient() override {
        return 1.0f;
    }

    bool IsStatic() override {
        return GetConstantValue(2, "Static") == this.Proto.PriceType;
    }
}

class ToolReagent : Reagent
{
    ProtoItem@ Proto;

    float _weight;
    float _coefficient;

    ToolReagent(ProtoItem@ proto) {
        @this.Proto = proto;
        this._weight = 0.0f;
        //this._weight = float(proto.Cost) * 0.05f;
        this._coefficient = 1.0f;
    }

    uint get_Id() override {
        return uint(this.Proto.ProtoId);
    }

    ReactiveType get_Type() override {
        return ReactiveType::ToolReagentType;
    }

    float get_Weight() override {
        return this._weight;
    }

    void set_Weight(float value) {
        this._weight = value;
    }

    float get_Coefficient() override {
        return this._coefficient;
    }

    void set_Coefficient(float value) {
        this._coefficient = value;
    }
}

class StatReagent : Reagent
{
    uint Stat;
    uint Value;

    StatReagent(uint stat, uint value = 0) {
        this.Stat = stat;
        this.Value = value;
    }

    uint get_Id() override {
        return this.Stat;
    }

    ReactiveType get_Type() override {
        return ReactiveType::StatReagentType;
    }

    float get_Weight() override {
        //return float(this.Value < 0 ? 0 : this.Value); // Uncoment to add stats to value
        return 0.0f;
    }

    float get_Coefficient() override {
        return 1.0f;
    }
}

class CraftTree
{
    array<StatReagent@> StatCache;
    array<ToolReagent@> ToolCache;
    array<ItemReagent@> ItemCache;

    void Dump() {
        string@[] messages;
        for (uint i = 0, l = this.ItemCache.length; i < l; i++) {
            if (this.ItemCache[i] is null) {
                continue;
            }
            uint id = this.ItemCache[i].Id;
            Log(GetItemName(id)+": $"+ceil(GetItemValue(id)));
            
            messages.insertLast("$ " + GetItemName(id)+" price: "+ceil(GetItemValue(id)));
        }
        for (uint i = 0, l = messages.length; i < l; i++) {
            TreeLog(messages[i]);
        }
    }

    StatReagent@ GetStatReagent(uint id, uint value = 0) {
        StatReagent reagent(id,value);
        return reagent;
        /*if (this.StatCache.length <= id) {
            this.StatCache.resize(1 + id);
        }
        if (null is this.StatCache[id]) {
            StatReagent reagent(id);
            @this.StatCache[id] = reagent;
        }
        return this.StatCache[id];*/
    }

    ToolReagent@ GetToolReagent(uint16 protoId) {
        uint pid = uint(protoId);
        if (this.ToolCache.length <= pid) {
            this.ToolCache.resize(1 + pid);
        }
        if (null is this.ToolCache[pid]) {
            ToolReagent reagent(GetProtoItem(protoId));
            @this.ToolCache[pid] = reagent;
        }
        return this.ToolCache[pid];
    }

    ItemReagent@ GetItemReagent(uint16 protoId) {
        uint pid = uint(protoId);
        if (this.ItemCache.length <= pid) {
            this.ItemCache.resize(1 + pid);
        }
        if (null is this.ItemCache[pid]) {
            ItemReagent reagent(GetProtoItem(protoId));
            @this.ItemCache[pid] = reagent;
        }
        return this.ItemCache[pid];
    }

    Reaction@ GetReaction(uint id, uint group, float coefficient = 1.0f, float weight = 0.0f) {
        Reaction reaction(id, group, coefficient, weight);
        return reaction;
    }

    float GetItemValue(uint16 protoId, FilterType filter = FilterType::Lowest) {
        ItemReagent@ item = this.GetItemReagent(uint(protoId));
        array<Reactive@> skip;
        float result = item.Evaluate(skip,Lowest);

        if (result < 0) {
            TreeLog("$ " + GetReactiveName(item) + " has no recipes, using built-in cost: " + item.EvaluateSelf());
            result = item.EvaluateSelf();
        } else {
            TreeLog("$ " + GetReactiveName(item) + " custom price: " + result);
        }

        return result;
    }

    CraftTree() {
        uint newRecipeId = 0;
        for (uint recipeId = 0, overflow = 0; recipeId <= UINT_MAX && overflow < 1000; recipeId++) {
            CraftItem@ recipe = GetCraftItem(recipeId);
          
            // Loop until a gap of 1000 unassigned receipts occurs
            if (null is recipe) {
                overflow++;
                continue;
            }
            overflow = 0;

            // Extract all necessary information from the receipt
            array<uint> statIds;
            array<int> statValues;
            array<bool> statOrs;
            recipe.GetNeedParams(statIds, statValues, statOrs);
            array<array<uint>> statGroups = GetGroupsFromOrs(statIds, statOrs);

            array<uint16> toolPids;
            array<uint> toolCounts;
            array<bool> toolOrs;
            recipe.GetNeedTools(toolPids, toolCounts, toolOrs);
            array<array<uint>> toolGroups = GetGroupsFromOrs(toolPids, toolOrs);

            array<uint16> componentPids;
            array<uint> componentCounts;
            array<bool> componentOrs; // if componentOrs[1] == true it means recipe is like "0 & 1 | 2"
            recipe.GetNeedItems(componentPids, componentCounts, componentOrs);
            array<array<uint>> componentGroups = GetGroupsFromOrs(componentPids, componentOrs);

            array<uint16> productPids;
            array<uint> productCounts;
            recipe.GetOutItems(productPids, productCounts);

            uint experience = recipe.Experience;

            for (uint c = 0; c < componentGroups.length; c++) {
                for (uint t = 0; t < toolGroups.length; t++) {
                    for (uint s = 0; s < statGroups.length; s++) {

                        // Spawn a new recipe
                        Reaction@ reaction = this.GetReaction(newRecipeId++, recipeId, 1.2, 0.0);

                        // Add products
                        for (uint i = 0, l = productPids.length; i < l; i++) {
                            reaction.AddProducts(
                                this.GetItemReagent(productPids[i]), 
                                productCounts[i]
                            );
                        }

                        // Add components
                        for (uint i = 0; i < componentGroups[c].length; i++) {
                            reaction.AddReagents(
                                this.GetItemReagent(componentPids[componentGroups[c][i]]), 
                                componentCounts[i]
                            );
                        }

                        // Add tools
                        for (uint i = 0; i < toolGroups[t].length; i++) {
                            reaction.AddReagents(
                                this.GetToolReagent(toolPids[toolGroups[t][i]]),
                                toolCounts[i]
                            );
                        }

                        // Add stats
                        for (uint i = 0; i < statGroups[s].length; i++) {
                            reaction.AddReagents(
                                this.GetStatReagent(statIds[statGroups[s][i]]), 
                                1
                            );
                        }

                        // CUSTOM: if there are only one type of component, use 1.1 coefficient
                        if (productPids.length == 1) {
                            reaction.Coefficient = 1.1;
                        }
                    }
                }
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// MODULE
///////////////////////////////////////////////////////////////////////////////

import uint[][] ImportFurnaceResourceTransfer() from "furnace"; // TODO : make so it does not exist

void LoadItemTree() // EXPORT
{
    Log("Load item prototype prices...");

    CraftTree tree;
    //
    // Custom non-recipe based script stuff 
    //
    uint[][] furnace = ImportFurnaceResourceTransfer();
    uint i = 1;

    for (;i < furnace.length; i++) {
        // in_type in_count out_type out_count
        if (4 == furnace[i].length) {
            Reaction@ reaction = tree.GetReaction(UINT_MAX - i, UINT_MAX, 1.2, 0.0);

            reaction.AddReagents(tree.GetItemReagent(furnace[i][0]), furnace[i][1]);
            reaction.AddProducts(tree.GetItemReagent(furnace[i][2]), furnace[i][3]);
        }
    }

    // Precalculates all the prices as well
    tree.Dump();

    Log("Load item prototype prices complete.");

    TreeLogCommit();
}

#endif // =====================================================================
